#Requires -RunAsAdministrator

<#
.SYNOPSIS
    ByensIT Optimizer - Sleeping Agent Setup
    
.DESCRIPTION
    Ops√¶tter en lokal "sleeping agent" der k√∏rer automatiske maintenance tasks
    Denne agent arbejder lokalt p√• din PC og hj√¶lper med kontinuerlig optimering
    
.NOTES
    Kr√¶ver administrator rettigheder for at oprette scheduled tasks
    
.AUTHOR
    ByensIT Sleeping Agent System
#>

param(
    [switch]$Install,
    [switch]$Uninstall,
    [switch]$Status,
    [string]$LogPath = "$PSScriptRoot\Logs"
)

# Farver til console output
$Green = "`e[32m"
$Yellow = "`e[33m"
$Red = "`e[31m"
$Blue = "`e[34m"
$Reset = "`e[0m"

function Write-AgentLog {
    param($Message, $Level = "INFO")
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    
    # Console output med farver
    switch ($Level) {
        "INFO" { Write-Host "$Blue[INFO]$Reset $Message" }
        "SUCCESS" { Write-Host "$Green[SUCCESS]$Reset $Message" }
        "WARNING" { Write-Host "$Yellow[WARNING]$Reset $Message" }
        "ERROR" { Write-Host "$Red[ERROR]$Reset $Message" }
    }
    
    # Log til fil
    if (!(Test-Path $LogPath)) {
        New-Item -ItemType Directory -Path $LogPath -Force | Out-Null
    }
    $logMessage | Add-Content -Path "$LogPath\sleeping-agent-$(Get-Date -Format 'yyyy-MM-dd').log"
}

function Install-SleepingAgent {
    Write-AgentLog "ü§ñ Installing ByensIT Sleeping Agent..." "INFO"
    
    # Opret agent scripts
    $agentPath = "$PSScriptRoot\Agent"
    if (!(Test-Path $agentPath)) {
        New-Item -ItemType Directory -Path $agentPath -Force | Out-Null
    }
    
    # Hovedagent script
    $mainAgentScript = @"
#Requires -RunAsAdministrator

# ByensIT Sleeping Agent - Main Runner
`$LogPath = "$LogPath"
`$ProjectPath = "$PSScriptRoot"

function Write-AgentLog {
    param(`$Message, `$Level = "INFO")
    `$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    `$logMessage = "[`$timestamp] [`$Level] `$Message"
    
    if (!(Test-Path `$LogPath)) {
        New-Item -ItemType Directory -Path `$LogPath -Force | Out-Null
    }
    `$logMessage | Add-Content -Path "`$LogPath\sleeping-agent-`$(Get-Date -Format 'yyyy-MM-dd').log"
}

function Start-AgentTasks {
    Write-AgentLog "üåô ByensIT Sleeping Agent starting tasks..." "INFO"
    
    try {
        # 1. System Health Check
        Write-AgentLog "üîç Performing system health check..." "INFO"
        `$healthScore = Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average
        `$memoryUsage = Get-WmiObject -Class Win32_OperatingSystem | ForEach-Object { [math]::Round(((`$_.TotalVisibleMemorySize - `$_.FreePhysicalMemory) / `$_.TotalVisibleMemorySize) * 100, 2) }
        
        `$healthReport = @{
            Date = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
            CPUAverage = `$healthScore.Average
            MemoryUsage = `$memoryUsage
            DiskSpace = (Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | ForEach-Object { [math]::Round(((`$_.Size - `$_.FreeSpace) / `$_.Size) * 100, 2) })
        }
        
        `$healthReport | ConvertTo-Json | Out-File "`$LogPath\health-check-`$(Get-Date -Format 'yyyy-MM-dd-HHmm').json"
        
        # 2. Cleanup temporary files
        Write-AgentLog "üßπ Cleaning temporary files..." "INFO"
        `$tempCleaned = 0
        `$tempPaths = @("`$env:TEMP", "`$env:TMP", "C:\Windows\Temp")
        
        foreach (`$tempPath in `$tempPaths) {
            if (Test-Path `$tempPath) {
                `$beforeSize = (Get-ChildItem `$tempPath -Recurse -File | Measure-Object -Property Length -Sum).Sum
                Get-ChildItem `$tempPath -Recurse -File | Where-Object { `$_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Force -ErrorAction SilentlyContinue
                `$afterSize = (Get-ChildItem `$tempPath -Recurse -File | Measure-Object -Property Length -Sum).Sum
                `$tempCleaned += (`$beforeSize - `$afterSize)
            }
        }
        
        Write-AgentLog "‚úÖ Cleaned `$([math]::Round(`$tempCleaned / 1MB, 2)) MB of temporary files" "SUCCESS"
        
        # 3. Update git repository hvis vi er i et git repo
        if (Test-Path ".git") {
            Write-AgentLog "üì° Checking for git updates..." "INFO"
            `$gitStatus = git status --porcelain
            if (`$gitStatus) {
                Write-AgentLog "üìù Found `$(`$gitStatus.Count) uncommitted changes" "INFO"
            }
            
            # Fetch latest changes
            git fetch origin 2>`$null
            `$behindCommits = git rev-list --count HEAD..origin/main 2>`$null
            if (`$behindCommits -and `$behindCommits -gt 0) {
                Write-AgentLog "‚¨áÔ∏è Repository is `$behindCommits commits behind origin/main" "INFO"
            }
        }
        
        # 4. System optimization tweaks
        Write-AgentLog "‚ö° Applying sleep-time optimizations..." "INFO"
        
        # Disable Windows Search Indexer during low activity
        `$searchService = Get-Service -Name "WSearch" -ErrorAction SilentlyContinue
        if (`$searchService -and `$searchService.Status -eq "Running") {
            `$cpuUsage = (Get-Counter "\Processor(_Total)\% Processor Time").CounterSamples.CookedValue
            if (`$cpuUsage -lt 20) {
                # System is idle, safe to run maintenance
                Write-AgentLog "üîç Running Windows Search optimization..." "INFO"
            }
        }
        
        # Memory optimization
        if (`$memoryUsage -gt 80) {
            Write-AgentLog "üîß High memory usage detected (`$memoryUsage%), running optimization..." "WARNING"
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
        
        # 5. Generate daily summary
        `$summaryReport = @"
# üåô ByensIT Sleeping Agent Report - `$(Get-Date -Format 'yyyy-MM-dd HH:mm')

## ü§ñ Automated Tasks Completed

### üíª System Health:
- **CPU Usage:** `$([math]::Round(`$healthScore.Average, 1))%
- **Memory Usage:** `$memoryUsage%
- **C: Drive Usage:** `$(`$healthReport.DiskSpace)%

### üßπ Cleanup Results:
- **Temporary Files Cleaned:** `$([math]::Round(`$tempCleaned / 1MB, 2)) MB
- **Cleanup Paths:** `$(`$tempPaths.Count) directories processed

### üìä Recommendations:
`$(if (`$memoryUsage -gt 80) { "- ‚ö†Ô∏è High memory usage - consider closing unused applications" } else { "- ‚úÖ Memory usage within normal range" })
`$(if (`$healthReport.DiskSpace -gt 90) { "- ‚ö†Ô∏è Low disk space - consider running disk cleanup" } else { "- ‚úÖ Disk space sufficient" })

---
*Generated by ByensIT Sleeping Agent at `$(Get-Date)*
"@
        
        `$summaryReport | Out-File "`$LogPath\agent-summary-`$(Get-Date -Format 'yyyy-MM-dd-HHmm').md"
        Write-AgentLog "üìä Generated system summary report" "SUCCESS"
        
        Write-AgentLog "üéØ All sleeping agent tasks completed successfully" "SUCCESS"
        
    } catch {
        Write-AgentLog "‚ùå Agent task failed: `$(`$_.Exception.Message)" "ERROR"
    }
}

# K√∏r agent tasks
Start-AgentTasks
"@

    $mainAgentScript | Out-File "$agentPath\MainAgent.ps1" -Encoding UTF8
    
    # Opret scheduled tasks
    Write-AgentLog "‚è∞ Creating scheduled tasks..." "INFO"
    
    # Nightly maintenance task (kl. 03:00)
    $nightlyAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$agentPath\MainAgent.ps1`""
    $nightlyTrigger = New-ScheduledTaskTrigger -Daily -At "03:00AM"
    $nightlySettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
    $nightlyPrincipal = New-ScheduledTaskPrincipal -UserID "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
    
    try {
        Register-ScheduledTask -TaskName "ByensIT-SleepingAgent-Nightly" -Action $nightlyAction -Trigger $nightlyTrigger -Settings $nightlySettings -Principal $nightlyPrincipal -Description "ByensIT Optimizer Sleeping Agent - Nightly maintenance" -Force
        Write-AgentLog "‚úÖ Created nightly maintenance task (03:00)" "SUCCESS"
    } catch {
        Write-AgentLog "‚ùå Failed to create nightly task: $($_.Exception.Message)" "ERROR"
    }
    
    # Quick check task (hver 4. time)
    $quickAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$agentPath\MainAgent.ps1`""
    $quickTrigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Hours 4) -RepetitionDuration (New-TimeSpan -Days 365)
    $quickSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
    
    try {
        Register-ScheduledTask -TaskName "ByensIT-SleepingAgent-QuickCheck" -Action $quickAction -Trigger $quickTrigger -Settings $quickSettings -Principal $nightlyPrincipal -Description "ByensIT Optimizer Sleeping Agent - Quick system check" -Force
        Write-AgentLog "‚úÖ Created quick check task (every 4 hours)" "SUCCESS"
    } catch {
        Write-AgentLog "‚ùå Failed to create quick check task: $($_.Exception.Message)" "ERROR"
    }
    
    Write-AgentLog "üéâ ByensIT Sleeping Agent installed successfully!" "SUCCESS"
    Write-AgentLog "üìä Logs will be saved to: $LogPath" "INFO"
    Write-AgentLog "üåô The agent will start working tonight at 03:00" "INFO"
}

function Uninstall-SleepingAgent {
    Write-AgentLog "üóëÔ∏è Uninstalling ByensIT Sleeping Agent..." "INFO"
    
    # Fjern scheduled tasks
    try {
        Unregister-ScheduledTask -TaskName "ByensIT-SleepingAgent-Nightly" -Confirm:$false -ErrorAction SilentlyContinue
        Unregister-ScheduledTask -TaskName "ByensIT-SleepingAgent-QuickCheck" -Confirm:$false -ErrorAction SilentlyContinue
        Write-AgentLog "‚úÖ Removed scheduled tasks" "SUCCESS"
    } catch {
        Write-AgentLog "‚ùå Failed to remove tasks: $($_.Exception.Message)" "ERROR"
    }
    
    # Fjern agent filer
    $agentPath = "$PSScriptRoot\Agent"
    if (Test-Path $agentPath) {
        Remove-Item $agentPath -Recurse -Force -ErrorAction SilentlyContinue
        Write-AgentLog "‚úÖ Removed agent files" "SUCCESS"
    }
    
    Write-AgentLog "üëã ByensIT Sleeping Agent uninstalled" "SUCCESS"
}

function Show-AgentStatus {
    Write-AgentLog "üìä ByensIT Sleeping Agent Status" "INFO"
    
    # Tjek scheduled tasks
    $nightlyTask = Get-ScheduledTask -TaskName "ByensIT-SleepingAgent-Nightly" -ErrorAction SilentlyContinue
    $quickTask = Get-ScheduledTask -TaskName "ByensIT-SleepingAgent-QuickCheck" -ErrorAction SilentlyContinue
    
    if ($nightlyTask) {
        Write-AgentLog "‚úÖ Nightly task: $($nightlyTask.State) - Next run: $($nightlyTask.Triggers[0].StartBoundary)" "SUCCESS"
    } else {
        Write-AgentLog "‚ùå Nightly task: Not installed" "ERROR"
    }
    
    if ($quickTask) {
        Write-AgentLog "‚úÖ Quick check task: $($quickTask.State)" "SUCCESS"
    } else {
        Write-AgentLog "‚ùå Quick check task: Not installed" "ERROR"
    }
    
    # Vis seneste logs
    $latestLogs = Get-ChildItem $LogPath -Filter "*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 3
    if ($latestLogs) {
        Write-AgentLog "üìÑ Recent activity:" "INFO"
        foreach ($log in $latestLogs) {
            Write-AgentLog "   - $($log.Name) ($(Get-Date $log.LastWriteTime -Format 'yyyy-MM-dd HH:mm'))" "INFO"
        }
    }
}

# Main execution logic
Write-Host @"
$Blue
üåô ByensIT Optimizer - Sleeping Agent Setup
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Den intelligente agent der arbejder mens du sover! 
$Reset
"@

if ($Install) {
    Install-SleepingAgent
} elseif ($Uninstall) {
    Uninstall-SleepingAgent
} elseif ($Status) {
    Show-AgentStatus
} else {
    Write-Host @"
Brug:
  .\Setup-SleepingAgent.ps1 -Install     # Installer sleeping agent
  .\Setup-SleepingAgent.ps1 -Uninstall   # Afinstaller sleeping agent  
  .\Setup-SleepingAgent.ps1 -Status      # Vis agent status

Den sleeping agent vil:
üîç K√∏re system health checks
üßπ Rydde op i temp filer
‚ö° Optimere system performance
üìä Generere daily reports
ü§ñ Arbejde mens du sover!
"@
} 
name: ByensIT Optimizer - Build & Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1

jobs:
  analyze:
    name: PowerShell Analysis
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install PSScriptAnalyzer
      shell: powershell
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
    - name: Run PSScriptAnalyzer
      shell: powershell
      run: |
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary -Settings PSGallery
        $results | Format-Table -AutoSize
        
        $errors = $results | Where-Object { $_.Severity -eq "Error" }
        $warnings = $results | Where-Object { $_.Severity -eq "Warning" }
        
        Write-Host "Analysis Summary:"
        Write-Host "Errors: $($errors.Count)"
        Write-Host "Warnings: $($warnings.Count)"
        
        if ($errors.Count -gt 0) {
          Write-Host "##[error]PSScriptAnalyzer found $($errors.Count) error(s)"
          exit 1
        }
        
        if ($warnings.Count -gt 10) {
          Write-Host "##[warning]PSScriptAnalyzer found $($warnings.Count) warning(s) - consider fixing"
        }

  test:
    name: Functional Tests
    runs-on: windows-latest
    needs: analyze
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Test Module Loading
      shell: powershell
      run: |
        Write-Host "Testing module imports..."
        
        # Test configuration loading
        if (!(Test-Path "config.json")) {
          Write-Error "config.json not found!"
          exit 1
        }
        
        if (!(Test-Path "version.json")) {
          Write-Error "version.json not found!"
          exit 1
        }
        
        $config = Get-Content "config.json" | ConvertFrom-Json
        $version = Get-Content "version.json" | ConvertFrom-Json
        
        Write-Host "Config loaded: $($config.modules.Count) modules"
        Write-Host "Version: $($version.version)"
        
    - name: Test PowerShell Scripts Syntax
      shell: powershell
      run: |
        Write-Host "Testing PowerShell syntax..."
        
        $scripts = Get-ChildItem -Path . -Filter "*.ps1" -Recurse
        $errors = @()
        
        foreach ($script in $scripts) {
          try {
            $tokens = $null
            $parseErrors = $null
            [System.Management.Automation.Language.Parser]::ParseFile($script.FullName, [ref]$tokens, [ref]$parseErrors)
            
            if ($parseErrors.Count -gt 0) {
              $errors += "Parse errors in $($script.Name): $($parseErrors -join '; ')"
            } else {
              Write-Host "✓ $($script.Name) - OK"
            }
          }
          catch {
            $errors += "Exception parsing $($script.Name): $($_.Exception.Message)"
          }
        }
        
        if ($errors.Count -gt 0) {
          $errors | ForEach-Object { Write-Error $_ }
          exit 1
        }
        
        Write-Host "All PowerShell scripts passed syntax validation!"

  build:
    name: Build Executable
    runs-on: windows-latest
    needs: [analyze, test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Install PS2EXE
      shell: powershell
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module -Name ps2exe -Force -Scope CurrentUser
        
    - name: Build Executable
      shell: powershell
      run: |
        Write-Host "Building ByensIT Optimizer executable..."
        
        # Get version from version.json
        $version = (Get-Content "version.json" | ConvertFrom-Json).version
        
        # Build main GUI executable
        ps2exe -inputFile "ByensIT-Optimizer-Part4_GUI.ps1" `
               -outputFile "ByensIT-Optimizer-v$version.exe" `
               -iconFile "assets\icon.ico" `
               -title "ByensIT Optimizer" `
               -description "Windows Optimization Tool by Byens IT" `
               -company "Byens IT" `
               -version $version `
               -copyright "© 2025 Byens IT" `
               -requireAdmin `
               -noConsole
               
        Write-Host "Build completed: ByensIT-Optimizer-v$version.exe"
        
    - name: Create Release Archive
      shell: powershell
      run: |
        $version = (Get-Content "version.json" | ConvertFrom-Json).version
        
        # Create release folder
        $releaseFolder = "ByensIT-Optimizer-v$version"
        New-Item -ItemType Directory -Path $releaseFolder -Force
        
        # Copy files
        Copy-Item "ByensIT-Optimizer-v$version.exe" "$releaseFolder\"
        Copy-Item "README.md" "$releaseFolder\"
        Copy-Item "config.json" "$releaseFolder\"
        Copy-Item "version.json" "$releaseFolder\"
        Copy-Item "*.ps1" "$releaseFolder\"
        
        # Create logs folder
        New-Item -ItemType Directory -Path "$releaseFolder\Logs" -Force
        
        # Create ZIP
        Compress-Archive -Path "$releaseFolder\*" -DestinationPath "ByensIT-Optimizer-v$version.zip"
        
        Write-Host "Release archive created: ByensIT-Optimizer-v$version.zip"
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ByensIT-Optimizer-v${{ github.event.release.tag_name }}.zip
        asset_name: ByensIT-Optimizer-v${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  security-scan:
    name: Security Scan
    runs-on: windows-latest
    needs: analyze
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Run Security Checks
      shell: powershell
      run: |
        Write-Host "Running security checks..."
        
        # Check for sensitive information
        $sensitivePatterns = @(
          "password\s*=",
          "secret\s*=", 
          "apikey\s*=",
          "token\s*=",
          "key\s*="
        )
        
        $files = Get-ChildItem -Path . -Filter "*.ps1" -Recurse
        $issues = @()
        
        foreach ($file in $files) {
          $content = Get-Content $file.FullName -Raw
          
          foreach ($pattern in $sensitivePatterns) {
            if ($content -match $pattern) {
              $issues += "Potential sensitive data in $($file.Name): matches '$pattern'"
            }
          }
        }
        
        if ($issues.Count -gt 0) {
          $issues | ForEach-Object { Write-Warning $_ }
          Write-Host "##[warning]Found $($issues.Count) potential security issue(s)"
        } else {
          Write-Host "✓ No obvious security issues found"
        }
        
    - name: Check File Permissions
      shell: powershell
      run: |
        Write-Host "Checking file permissions..."
        
        $scripts = Get-ChildItem -Path . -Filter "*.ps1" -Recurse
        
        foreach ($script in $scripts) {
          $content = Get-Content $script.FullName -Raw
          
          # Check for #Requires -RunAsAdministrator
          if ($content -notmatch "#Requires -RunAsAdministrator") {
            Write-Warning "$($script.Name) missing #Requires -RunAsAdministrator"
          } else {
            Write-Host "✓ $($script.Name) has admin requirement"
          }
        }

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Check Documentation
      run: |
        echo "Checking documentation completeness..."
        
        # Check required files
        required_files=("README.md" "config.json" "version.json")
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
        # Check README structure
        if ! grep -q "## Quick Start" README.md; then
          echo "❌ README.md missing Quick Start section"
          exit 1
        fi
        
        if ! grep -q "## Systemkrav" README.md; then
          echo "❌ README.md missing system requirements"
          exit 1
        fi
        
        echo "✓ Documentation structure looks good!" 
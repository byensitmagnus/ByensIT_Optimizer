name: 🤖 Smart Dependency Bot

on:
  schedule:
    # Kører hver tirsdag og fredag kl. 09:00 UTC
    - cron: '0 9 * * 2,5'
  workflow_dispatch:
  
jobs:
  smart-dependency-update:
    name: 🔄 Intelligent Dependency Management
    runs-on: windows-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Intelligent Package Analysis
      shell: powershell
      run: |
        Write-Host "🔍 Performing intelligent dependency analysis..."
        
        # Check current packages
        $currentPackages = dotnet list package --format json | ConvertFrom-Json
        $outdatedPackages = dotnet list package --outdated --format json | ConvertFrom-Json
        
        $updateReport = @{
          Date = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
          PackagesToUpdate = @()
          SkippedPackages = @()
          BreakingChanges = @()
        }
        
        if ($outdatedPackages.projects) {
          foreach ($project in $outdatedPackages.projects) {
            if ($project.frameworks) {
              foreach ($framework in $project.frameworks) {
                if ($framework.topLevelPackages) {
                  foreach ($package in $framework.topLevelPackages) {
                    $packageName = $package.id
                    $currentVersion = $package.resolvedVersion
                    $latestVersion = $package.latestVersion
                    
                    Write-Host "📦 Analyzing $packageName : $currentVersion -> $latestVersion"
                    
                    # Intelligent update decision logic
                    $shouldUpdate = $true
                    $updateReason = "Safe update"
                    
                    # Check for major version changes (potential breaking changes)
                    $currentMajor = [int]($currentVersion -split '\.')[0]
                    $latestMajor = [int]($latestVersion -split '\.')[0]
                    
                    if ($latestMajor -gt $currentMajor) {
                      $shouldUpdate = $false
                      $updateReason = "Major version change - requires manual review"
                      $updateReport.BreakingChanges += @{
                        Package = $packageName
                        Current = $currentVersion
                        Latest = $latestVersion
                        Reason = $updateReason
                      }
                    }
                    
                    # Critical packages that need careful handling
                    $criticalPackages = @('Microsoft.EntityFrameworkCore', 'Microsoft.AspNetCore', 'System.Management.Automation')
                    if ($packageName -in $criticalPackages) {
                      # Only update minor/patch versions for critical packages
                      $currentMinor = [int]($currentVersion -split '\.')[1]
                      $latestMinor = [int]($latestVersion -split '\.')[1]
                      
                      if ($latestMinor -gt $currentMinor -and $latestMajor -eq $currentMajor) {
                        $shouldUpdate = $false
                        $updateReason = "Critical package - minor version change requires testing"
                      }
                    }
                    
                    if ($shouldUpdate) {
                      $updateReport.PackagesToUpdate += @{
                        Package = $packageName
                        Current = $currentVersion
                        Latest = $latestVersion
                        Project = $project.path
                      }
                    } else {
                      $updateReport.SkippedPackages += @{
                        Package = $packageName
                        Current = $currentVersion
                        Latest = $latestVersion
                        Reason = $updateReason
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        # Save analysis report
        $updateReport | ConvertTo-Json -Depth 3 | Out-File "Logs/dependency-analysis-$(Get-Date -Format 'yyyy-MM-dd').json"
        
        # Perform safe updates
        foreach ($update in $updateReport.PackagesToUpdate) {
          Write-Host "⬆️ Updating $($update.Package) to $($update.Latest)"
          
          try {
            dotnet add package $update.Package --version $update.Latest
            
            # Test build after each update
            $buildResult = dotnet build --configuration Release --verbosity quiet
            if ($LASTEXITCODE -ne 0) {
              Write-Host "❌ Build failed after updating $($update.Package), reverting..."
              # Revert to previous version
              dotnet add package $update.Package --version $update.Current
              
              $updateReport.SkippedPackages += @{
                Package = $update.Package
                Reason = "Build failed after update"
              }
            } else {
              Write-Host "✅ Successfully updated $($update.Package)"
            }
          }
          catch {
            Write-Host "❌ Failed to update $($update.Package): $($_.Exception.Message)"
          }
        }
        
        # Generate summary report
        $summaryReport = "# 🤖 Smart Dependency Update Report - $(Get-Date -Format 'yyyy-MM-dd')`n`n"
        
        if ($updateReport.PackagesToUpdate.Count -gt 0) {
          $summaryReport += "## ✅ Successfully Updated Packages`n"
          foreach ($update in $updateReport.PackagesToUpdate) {
            $summaryReport += "- **$($update.Package)**: $($update.Current) → $($update.Latest)`n"
          }
          $summaryReport += "`n"
        }
        
        if ($updateReport.SkippedPackages.Count -gt 0) {
          $summaryReport += "## ⏸️ Skipped Packages`n"
          foreach ($skip in $updateReport.SkippedPackages) {
            $summaryReport += "- **$($skip.Package)**: $($skip.Reason)`n"
          }
          $summaryReport += "`n"
        }
        
        if ($updateReport.BreakingChanges.Count -gt 0) {
          $summaryReport += "## ⚠️ Potential Breaking Changes (Manual Review Required)`n"
          foreach ($breaking in $updateReport.BreakingChanges) {
            $summaryReport += "- **$($breaking.Package)**: $($breaking.Current) → $($breaking.Latest) ($($breaking.Reason))`n"
          }
          $summaryReport += "`n"
        }
        
        $summaryReport += "---`n*Report generated by Smart Dependency Bot* 🤖"
        
        $summaryReport | Out-File "Logs/dependency-update-$(Get-Date -Format 'yyyy-MM-dd').md"
        
        # Commit changes if any
        git config --local user.email "dependencybot@byens-it.dk"
        git config --local user.name "ByensIT Smart Dependency Bot"
        
        if (git status --porcelain) {
          git add .
          git commit -m "🤖 Smart Dependencies: Auto-updated $(($updateReport.PackagesToUpdate).Count) packages

          Updated packages:
          $(($updateReport.PackagesToUpdate | ForEach-Object { "- $($_.Package) $($_.Current) → $($_.Latest)" }) -join "`n")
          
          Skipped packages: $(($updateReport.SkippedPackages).Count)
          Potential breaking changes: $(($updateReport.BreakingChanges).Count)
          
          Full report: Logs/dependency-update-$(Get-Date -Format 'yyyy-MM-dd').md"
          
          git push
        }

  create-update-pr:
    name: 🔄 Create Update Pull Request
    runs-on: ubuntu-latest
    needs: smart-dependency-update
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Check for Breaking Changes
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Check if there are breaking changes that need manual review
          const logFiles = fs.readdirSync('Logs').filter(f => f.includes('dependency-analysis'));
          
          if (logFiles.length > 0) {
            const latestLog = logFiles.sort().pop();
            const analysisData = JSON.parse(fs.readFileSync(`Logs/${latestLog}`, 'utf8'));
            
            if (analysisData.BreakingChanges && analysisData.BreakingChanges.length > 0) {
              // Create PR for breaking changes
              const title = `🚨 Manual Review Required: Dependency Updates with Breaking Changes`;
              const body = `## 🤖 Smart Dependency Bot Report
              
              The dependency bot has identified **${analysisData.BreakingChanges.length} packages** with potential breaking changes that require manual review:
              
              ### ⚠️ Breaking Changes Detected:
              ${analysisData.BreakingChanges.map(pkg => 
                `- **${pkg.Package}**: ${pkg.Current} → ${pkg.Latest}\n  *${pkg.Reason}*`
              ).join('\n')}
              
              ### ✅ Safe Updates Applied:
              ${analysisData.PackagesToUpdate.map(pkg => 
                `- **${pkg.Package}**: ${pkg.Current} → ${pkg.Latest}`
              ).join('\n')}
              
              ### 🛡️ Recommended Actions:
              1. Review breaking changes documentation for each package
              2. Run comprehensive testing
              3. Update code to handle breaking changes
              4. Test critical functionality
              
              **Agent Status:** 🤖 Awaiting Human Review
              `;
              
              try {
                await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  head: 'dependency-updates',
                  base: 'main',
                  labels: ['🤖 auto-generated', 'dependencies', '⚠️ breaking-changes']
                });
                
                console.log('✅ Created PR for breaking changes review');
              } catch (error) {
                console.log(`ℹ️ PR creation skipped: ${error.message}`);
              }
            }
          } 